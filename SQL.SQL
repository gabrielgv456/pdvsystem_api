BEGIN
    --INICIALIZAÃ‡ÃƒO DAS VARIÃVEIS
    VALICMS         = 0.00;
    VALIPI          = 0.00;
    VALSUBTRIB      = 0.00;
    VALISS          = 0.00;
    VALPIS          = 0.00;
    VALCOFINS       = 0.00;
    VALIMP          = 0.00;
    VALIRRF         = 0.00;
    VALCSSL         = 0.00;
    ALIQICMS        = 0.00;
    ALIQREDBASEICMS = 0.00;
    ALIQIPI         = 0.00;
    ALIQSUBTRIB     = 0.00;
    ALIQISS         = 0.00;
    ALIQPIS         = 0.00;
    ALIQCOFINS      = 0.00;
    ALIQIMP         = 0.00;
    ALIQIRRF        = 0.00;
    ALIQCSSL        = 0.00;
    ALIQMVA         = 0.00;
    ALIQICMS        = 0.00;
    ALIQREDBASEMVA  = 0.00;
    BASEICMS        = 0.00;
    BASESUBTRIB     = 0.00;
    BASEPIS         = 0.00;
    BASECOFINS      = 0.00;
    BASEIPI         = 0.00;

    IF (OPERACAO IS NULL) THEN
        EXCEPTION REGISTRO_NAO_ENCONTRADO 'OperaÃ§Ã£o fiscal nÃ£o informada ';
    --BUSCA OPERAÃ‡ÃƒO DA NOTA
    SELECT OP.T330TIPOMOV,
    OP.T330CALCICMS, OP.T330CALCIPI, OP.T330CALCSUBTRIB, OP.T330CALCISS, OP.T330CALCPIS,
    OP.T330CALCCOFINS, OP.T330CALCIMPIMPORT, OP.T330CALCIRRF, OP.T330CALCCSSL,
    OP.T330SOMAIPIBASEICMS, OP.T330SOMAFRETEBASEICMS, OP.T330SOMAOUTRASBASEICMS, OP.T330SOMASEGUROBASEICMS,
    OP.T330SOMAPISBASEICMS, OP.T330SOMACOFINSBASEICMS, OP.T330SOMAFRETEBASESUBTRIB, OP.T330SOMAOUTRASBASESUBTRIB,
    OP.T330SOMASEGUROBASESUBTRIB, OP.T330SOMAIPIBASEPIS, OP.T330SOMAIPIBASECOFINS, OP.T330SOMADESPACESSBASEIPI,
    OP.T330DEDUZIPIVALUNIT, OP.T330DEDUZISSRECEBIMENTO, OP.T330DEDUZDESCNFBASEICMS, OP.T330DEDUZDESCNFBASESUBTRIB,
    OP.T330DESCBASEIPI, COALESCE(OP.T330REMVALICMSBASEPISCOFINS, 'N'), COALESCE(OP.T330ICMSSTRETIDO, 'N')
    FROM T330OPERACOES OP WHERE OP.T330IDOPER = :OPERACAO
    INTO :TIPO,
    :CALCULAICMS, :CALCULAIPI, :CALCULASUBTRIB, :CALCULAISS, :CALCULAPIS,
    :CALCULACOFINS, :CALCULAIMP, :CALCULAIRRF, :CALCULACSSL,
    :SIPIBASEICMS, :SFRETEBASEICMS, :SOUTRASBASEICMS, :SSEGUROBASEICMS,
    :SPISBASEICMS, :SCOFINSBASEICMS, :SFRETEBASESUBTRIB, :SOUTRASBASESUBTRIB,
    :SSEGUROBASESUBTRIB, :SIPIBASEPIS, :SIPIBASECOFINS, :SACESSORIASBASEIPI,
    :DIPIVALUNIT, :DISSREC, :DDESCNFBASEICMS, :DDESCNFBASESUBST, :DESCBASEIPI,
    :REMOVEICMSBASEPISCOFINS, :ICMSSTRETIDO;
    IF (:TIPO IS NULL) THEN
        EXCEPTION REGISTRO_NAO_ENCONTRADO 'OperaÃ§Ã£o ' || CAST(:OPERACAO AS VARCHAR(10));
    --DETERMINA SE A UF DA LOJA Ã‰ DESTINO OU ORIGEM DA NOTA
    IF (TIPO = 'S') THEN BEGIN --SE FOR SAÃDA Ã‰ ORIGEM
       UFORIGEM = :UFEMITENTE;
       UFDESTINO = :UFDESTINATARIO;
    END ELSE BEGIN  --SE FOR ENTRADA Ã‰ DESTINO
       UFORIGEM = :UFDESTINATARIO;
       UFDESTINO = :UFEMITENTE;
    END

    --PRODUTO
    SELECT CFOP.T054CODIGO FROM T054CFOP CFOP WHERE CFOP.T054IDCFOP = :CODCFOP INTO :CODCFOP;
    SELECT P.T050CLASFISC, p.T050PERC_IPI, P.T050IPIENTRADA,
           P.T050IPISAIDA, P.T050ORIGEM, CAST(P.T050TRIBCPLUS AS INTEGER),
           P.T050CALCDIFENTRADA, P.T050CALCDIFSAIDA, P.T050TRIBUTACAO
    FROM T050PRODUTOS P
    WHERE P.T050IDPROD = :PRODUTO INTO
    :CLASSFISC, :ALIQIPI, :IPIENTRADA, :IPISAIDA, :ORIGEM,
    :ICMS, :IDCALCDIFENTRADA, :IDCALCDIFSAIDA, :TRIBICMS;
    IF ((COALESCE(:IDCALCDIFENTRADA,0) > 0) OR (COALESCE(:IDCALCDIFSAIDA,0) > 0)) THEN BEGIN
     -- PRODUTO ST COM CÃLC. DIFERENCIADO
     IF (:TRIBICMS = 6) THEN ICMS = 5;
    END
    IF (ICMS IS NULL) THEN
        EXCEPTION REGISTRO_NAO_ENCONTRADO 'Produto nÃ£o encontrado';

    --CÃ¡lculo de ICMS Por estado
    SELECT IE.T332IDCALCULAICMSESTADO, IE.T332CST, IE.T332ALIQREDBASEICMS,
    COALESCE(IE.T332ALIQICMS,0.00), '',
    0, 0,
    IE.T332CSTPIS, COALESCE(IE.T332ALIQPIS,0.00), '', 0,
    IE.T332CSTCOFINS, COALESCE(IE.T332ALIQCOFINS,0.00), '', 0,
    IE.T332ALIQMVA, 0, IE.T332REDBASEMVA, 0,
    IE.T332MODICMS, IE.T332MODST, IE.T332CFOP
    FROM T332CALCULAICMSESTADO IE
    WHERE (IE.T332CALCULAICMS = :ICMS)
    --AND (IE.T332CFOP = :IDCFOP)
    AND (IE.T332UFORIGEM = :UFORIGEM)
    AND (IE.T332UFDESTINO = :UFDESTINO)
    AND (IE.T332IDOPERACAOFISCAL = :OPERACAO)
    AND ((CURRENT_DATE BETWEEN IE.T332INIVIGENCIA AND IE.T332FIMVIGENCIA) OR (IE.T332FIMVIGENCIA IS NULL))
    INTO :ICMSEST, :CST, :ALIQREDBASEICMS, :ALIQICMS, :CSTDIF,
    :ALIQREDBASEICMSDIF, :ALIQICMSDIF,
    :CSTPIS, :ALIQPIS, :CSTPISDIF, :ALIQPISDIF,
    :CSTCOFINS, :ALIQCOFINS, :CSTCOFINSDIF, :ALIQCOFINSDIF,
    :ALIQMVA, :ALIQMVADIF, :ALIQREDBASEMVA, :ALIQREDBASEMVADIF,
    :MODICMS, :MODST, :IDCFOP;
    IF (ICMSEST IS NULL) THEN
        EXCEPTION REGISTRO_NAO_ENCONTRADO 'CÃ¡lculo de ICMS NÂº '||CAST(ICMS AS VARCHAR(6))||' nÃ£o possui correspondente por estado com CFOP: ' || CODCFOP || ' UF Orig./Dest. '|| UFORIGEM ||'/'||UFDESTINO ;

    --CÃ¡lculo diferenciado para entrada
    IF ((:TIPO = 'E') AND (COALESCE(:IDCALCDIFENTRADA,0) > 0)) THEN BEGIN
       SELECT
          COALESCE(CDIF.T3321CSTPISDIF, :CSTPIS),
          COALESCE(CDIF.T3321ALIQPISDIF, :ALIQPIS),
          COALESCE(CDIF.T3321CSTCOFINSDIF, :CSTCOFINS),
          COALESCE(CDIF.T3321ALIQCOFINSDIF, :ALIQCOFINS)
       FROM T3321CALCULODIF CDIF
       INNER JOIN T3322CALCDIFICMSEST CDIFEST ON CDIF.T3321IDCALCDIF = CDIFEST.T3322IDCALCDIF
       WHERE CDIF.T3321IDCALCDIF = :IDCALCDIFENTRADA AND CDIFEST.T3322IDICMSEST = :ICMSEST
       INTO :CSTPIS, :ALIQPIS, :CSTCOFINS, :ALIQCOFINS;
    END
    --CÃ¡lculo diferenciado para saÃ­da
    IF ((:TIPO = 'S') AND (COALESCE(:IDCALCDIFSAIDA,0) > 0)) THEN BEGIN
       SELECT
          COALESCE(CDIF.T3321CSTPISDIF, :CSTPIS),
          COALESCE(CDIF.T3321ALIQPISDIF, :ALIQPIS),
          COALESCE(CDIF.T3321CSTCOFINSDIF, :CSTCOFINS),
          COALESCE(CDIF.T3321ALIQCOFINSDIF, :ALIQCOFINS)
       FROM T3321CALCULODIF CDIF
       INNER JOIN T3322CALCDIFICMSEST CDIFEST ON CDIF.T3321IDCALCDIF = CDIFEST.T3322IDCALCDIF
       WHERE CDIF.T3321IDCALCDIF = :IDCALCDIFSAIDA AND CDIFEST.T3322IDICMSEST = :ICMSEST
       INTO :CSTPIS, :ALIQPIS, :CSTCOFINS, :ALIQCOFINS;
    END

    --CST DO IPI
       ALIQIPI = 0;
       if (TIPO = 'S') then
           CSTIPI = :IPISAIDA;
       ELSE    
           CSTIPI = :IPIENTRADA;
       --Base do IPI, Valor do IPI e soma de desp acessÃ³rias na base do IPI
       IF (CALCULAIPI = 'S') THEN BEGIN
           SELECT IPI.T057IPI FROM T057CLASFISC IPI WHERE IPI.T057IDCF = :CLASSFISC INTO :ALIQIPI;
           BASEIPI = (:VUNIT * :QUANT);
           IF (SACESSORIASBASEIPI = 'S') THEN BEGIN
               BASEIPI = :BASEIPI + :VOUTROSITEM;
           END 
           VALIPI =  :BASEIPI *(:ALIQIPI / 100.00);
       END

    --CASO OPERAÃ‡ÃƒO NÃƒO TENHA REMOÃ‡ÃƒO DO ICMS NA BASE DO PIS/COFINS
    IF ((:REMOVEICMSBASEPISCOFINS = 'N') OR (COALESCE(:DEVENDANTESEXCPC, 'N') = 'S'))  THEN BEGIN

       --Base do PIS, Valor do PIS e soma do IPI na base do pis
       IF (CALCULAPIS = 'S') THEN BEGIN
           BASEPIS = 0.00;
           BASEPIS = (:VUNIT * :QUANT);
           IF (SIPIBASEPIS = 'S') THEN BEGIN
               BASEPIS = :BASEPIS + :VALIPI;
           END
           IF (ALIQPISDIF > 0.00) THEN ALIQPIS = :ALIQPISDIF;
           VALPIS = :BASEPIS * (:ALIQPIS / 100.00);
           IF (:VALPIS <= 0.00 AND :ALIQPIS = 0) THEN BASEPIS = 0.00;
       END
       --Base co Cofins, valor do cofins e soma do IPI na base do Cofins
       IF (CALCULACOFINS = 'S') THEN BEGIN
           BASECOFINS = 0.00;
           BASECOFINS = (:VUNIT * :QUANT);
           IF (SIPIBASECOFINS = 'S') THEN BEGIN
               BASECOFINS = :BASECOFINS + :VALIPI;
           END
           IF (ALIQCOFINSDIF > 0.00) THEN ALIQCOFINS = :ALIQCOFINSDIF;
           VALCOFINS = :BASECOFINS * (:ALIQCOFINS / 100.00);
           IF (:VALCOFINS <= 0.00 AND :ALIQCOFINS = 0) THEN BASECOFINS = 0.00;
       END

       --CÃ¡lculo de ICMS, soma frete, seguro, outras, pis, cofins, ipi
       IF ((CALCULAICMS = 'S') and ((ALIQICMS > 0.00) or(ALIQICMSDIF > 0.00)))  THEN BEGIN
           --ConfiguraÃ§Ã£o de alÃ­quota diferenciada sobrescreve a normal
           IF (ALIQICMSDIF > 0) THEN BEGIN
               ALIQICMS = :ALIQICMSDIF;
               ALIQREDBASEICMS = :ALIQREDBASEICMSDIF;
           END
           --Base simples
           BASEICMS = (:VUNIT * :QUANT);
           --Base de imposto sobre imposto (Verificar qual correto) Cplus usa a simples
           --BASEICMS = :BASEICMS/(1 - (:ALIQICMS/100.00));
           IF (SFRETEBASEICMS = 'S') THEN BEGIN
               BASEICMS = :BASEICMS + VFRETEITEM;
           END
           IF (SOUTRASBASEICMS = 'S') THEN BEGIN
               BASEICMS = :BASEICMS + VOUTROSITEM;
           END
           IF (SSEGUROBASEICMS = 'S') THEN BEGIN
               BASEICMS = :BASEICMS + VSEGUROITEM;
           END
           IF (SIPIBASEICMS = 'S') THEN BEGIN
               BASEICMS = :BASEICMS + VALIPI;
           END
--           IF (SPISBASEICMS = 'S') THEN BEGIN
--               BASEICMS = :BASEICMS + VALPIS;
--           END
--           IF (SCOFINSBASEICMS = 'S') THEN BEGIN
--               BASEICMS = :BASEICMS + VALCOFINS;
--           END
           --Aplica a reduÃ§Ã£o de base do ICMS se houver
           IF (ALIQREDBASEICMS > 0) THEN BEGIN
               BASEICMS = :BASEICMS * ((100.00 - :ALIQREDBASEICMS )/100.00);
           END
           VALICMS = :BASEICMS * (:ALIQICMS / 100.00);
       END
    END ELSE BEGIN
    --CASO TENHA REMOÃ‡ÃƒO DO ICMS NA BASE DO PIS/COFINS

       --CÃ¡lculo de ICMS, soma frete, seguro, outras, pis, cofins, ipi
       IF ((CALCULAICMS = 'S') and ((ALIQICMS > 0.00) or(ALIQICMSDIF > 0.00)))  THEN BEGIN
           --ConfiguraÃ§Ã£o de alÃ­quota diferenciada sobrescreve a normal
           IF (ALIQICMSDIF > 0) THEN BEGIN
               ALIQICMS = :ALIQICMSDIF;
               ALIQREDBASEICMS = :ALIQREDBASEICMSDIF;
           END
           --Base simples
           BASEICMS = (:VUNIT * :QUANT);
           --Base de imposto sobre imposto (Verificar qual correto) Cplus usa a simples
           --BASEICMS = :BASEICMS/(1 - (:ALIQICMS/100.00));
           IF (SFRETEBASEICMS = 'S') THEN BEGIN
               BASEICMS = :BASEICMS + VFRETEITEM;
           END
           IF (SOUTRASBASEICMS = 'S') THEN BEGIN
               BASEICMS = :BASEICMS + VOUTROSITEM;
           END
           IF (SSEGUROBASEICMS = 'S') THEN BEGIN
               BASEICMS = :BASEICMS + VSEGUROITEM;
           END
           IF (SIPIBASEICMS = 'S') THEN BEGIN
               BASEICMS = :BASEICMS + VALIPI;
           END
--           IF (SPISBASEICMS = 'S') THEN BEGIN
--               BASEICMS = :BASEICMS + VALPIS;
--           END
--           IF (SCOFINSBASEICMS = 'S') THEN BEGIN
--               BASEICMS = :BASEICMS + VALCOFINS;
--           END
           --Aplica a reduÃ§Ã£o de base do ICMS se houver
           IF (ALIQREDBASEICMS > 0) THEN BEGIN
               BASEICMS = :BASEICMS * ((100.00 - :ALIQREDBASEICMS )/100.00);
           END
           VALICMS = :BASEICMS * (:ALIQICMS / 100.00);
       END
       --Base do PIS, Valor do PIS e soma do IPI na base do pis
       IF (CALCULAPIS = 'S') THEN BEGIN
           BASEPIS = 0.00;
           BASEPIS = (:VUNIT * :QUANT) - :VALICMS;
           IF (SIPIBASEPIS = 'S') THEN BEGIN
               BASEPIS = :BASEPIS + :VALIPI;
           END
           IF (ALIQPISDIF > 0.00) THEN ALIQPIS = :ALIQPISDIF;
           VALPIS = :BASEPIS * (:ALIQPIS / 100.00);
           IF (:VALPIS <= 0.00 AND :ALIQPIS = 0) THEN BASEPIS = 0.00;
       END

       --Base co Cofins, valor do cofins e soma do IPI na base do Cofins
       IF (CALCULACOFINS = 'S') THEN BEGIN
           BASECOFINS = 0.00;
           BASECOFINS = (:VUNIT * :QUANT) - :VALICMS;
           IF (SIPIBASECOFINS = 'S') THEN BEGIN
               BASECOFINS = :BASECOFINS + :VALIPI;
           END
           IF (ALIQCOFINSDIF > 0.00) THEN ALIQCOFINS = :ALIQCOFINSDIF;
           VALCOFINS = :BASECOFINS * (:ALIQCOFINS / 100.00);
           IF (:VALCOFINS <= 0.00 AND :ALIQCOFINS = 0) THEN BASECOFINS = 0.00;
       END
    END

    --Base da Subst. Trib., Soma frete - Outras e Seguro
       IF (CALCULASUBTRIB = 'S') THEN BEGIN
           BASESUBTRIB = (:VUNIT * :QUANT);
           IF (SFRETEBASESUBTRIB = 'S') THEN BEGIN
               BASESUBTRIB = :BASESUBTRIB + :VFRETEITEM;
           END
           IF (SOUTRASBASESUBTRIB = 'S') THEN BEGIN
               BASESUBTRIB = :BASESUBTRIB + :VOUTROSITEM;
           END
           IF (SSEGUROBASESUBTRIB = 'S') THEN BEGIN
               BASESUBTRIB = :BASESUBTRIB + :VSEGUROITEM;
           END
           IF (ALIQMVADIF > 0) THEN ALIQMVA = :ALIQMVADIF;
           IF (ALIQSUBTRIBDIF > 0) THEN ALIQSUBTRIB = :ALIQSUBTRIBDIF;
           BASESUBTRIB = (:BASESUBTRIB) * (:ALIQMVA / 100.00);
   
           VALSUBTRIB = (:ALIQSUBTRIB * :BASESUBTRIB * (:VUNIT * :QUANT)/(1 - (:ALIQICMS/100.00)) / 100.00) - (:ALIQICMS / 100.00 * (:VUNIT * :QUANT) * :BASEICMS / 100.00);
   --*             Valor da Sub. Trib. ReduÃ§Ã£o de Base MVA
       END

    --CÃ¡lculo de ISS
    IF (CALCULAISS = 'S') THEN BEGIN
        VALISS = (:VUNIT * :QUANT) *(:ALIQISS/100.00);
    END
    --CÃ¡lculo de imposto de importaÃ§Ã£o
    if (CALCULAIMP = 'S') then begin
        ALIQIMP = 0;
        VALIMP = (:VUNIT * :QUANT) * (:ALIQIMP/100.00);
    end
    --CÃ¡lculo de IRRF
    IF (CALCULAIRRF = 'S') THEN BEGIN
        VALIRRF = (:VUNIT * :QUANT) * (:ALIQIRRF/100.00);
    END
    --CÃ¡lculo de CSSL
    IF (CALCULACSSL = 'S') THEN BEGIN
        VALCSSL = (:VUNIT * :QUANT) * (:ALIQCSSL/100.00);
    END
    SELECT T0494ID FROM T0494CLASSPIS WHERE T0494CODSPED = :CSTPIS INTO :TRIBPIS;
    SELECT T0495ID FROM T0495CLASSCOFINS WHERE T0495CODSPED = :CSTCOFINS INTO :TRIBCOFINS;
  SUSPEND;
end





















SELECT
    NOMEROTA,
    QTDITENSROTA,
    ENTREGA,
    REENTREGA,
    DOCCLIENTE,
    NOMECLIENTE,
    "SEQUENCIA",
    PERIODOENTREGA,
    IDOPERACAO,
    IDPRODUTO,
    QTDEPRODUTO,
    UNITARIOPRODUTO,
    DESCRICAOPRODUTO,
    TIPOOPERACAO,
    TIPOWMS,
    TELEFONE,
    EMAIL,
    CIDADE,
    TIPOENDERECO,
    LOGRADOURO,
    NUMERO,
    COMPLEMENTO,
    BAIRRO,
    CEP,
    TP_PESSOA,
    UF,
    CODCLIENTE,
    COD_PRACA,
    DESC_PRACA,
    VENDA_TRANSF,
    IDDEMANDA,
    COALESCE(STATUS_CORTE,'') AS STATUS_CORTE,
    TIPO,
    VENDA,
    ATENDENTE,
    QTDERELATORIO,
    IIF(COALESCE(STATUS_CORTE,'') = 'C',0,QTDERELATORIO* CUBAGEM) AS VOLCUBAGEM,
    IDENDERECO,
    IDITEMTRANSF,
    NOMESERVICO,
    INFOENTREGA,
    CODTRANSP,
    NOMETRANSPORTADORA
FROM (
       SELECT
          ROT.T065NOMEROTA NOMEROTA,
          (
           SELECT COUNT(*)
           FROM
             (SELECT DISTINCT RIN.T0641SEQUENCIA FROM T0641ITENTREGA RIN
             WHERE RIN.T0641IDCARGA = IE.T0641IDCARGA)

          ) QTDITENSROTA,
          VDO.T003NOME ATENDENTE,
          CASE
              WHEN
                COALESCE(
                (SELECT COUNT(*) FROM T0641ITENTREGA RIN
                 WHERE RIN.T0641IDCARGA < IE.T0641IDCARGA
                 AND RIN.T0641IDITVENDA = IE.T0641IDITVENDA
                 AND RIN.T0641IDVENDA = IE.T0641IDVENDA),0) > 0 THEN
                 'S'
              ELSE 'N'
          END REENTREGA,
          IE.T0641CODENTREGA AS ENTREGA,
          CLI.T017DOC AS DOCCLIENTE,
          CLI.T017NOME AS NOMECLIENTE,
          IE.T0641SEQUENCIA AS "SEQUENCIA",
          IE.T0641PERIODOENTREGA AS PERIODOENTREGA,
          IE.T0641IDITVENDA AS IDOPERACAO,
          IV.T081PRODUTO AS IDPRODUTO,
          IV.T081QUANT AS QTDEPRODUTO,
          DM.T231QUANT AS QTDERELATORIO,
          IV.T081UNITARIO AS UNITARIOPRODUTO,
          PRO.T050DESCRICAO AS DESCRICAOPRODUTO,
          1 AS TIPOOPERACAO,
          CASE
              WHEN  (UPPER(V.T080INFOENTREGA) <> 'LOGISTICA INTERNA 1') and
                    (upper(et.t631nomecvt) <> upper(v.t080infoentrega)) and
                    (upper(et.t631nomemkp) <> upper(v.t080infoentrega))  THEN 'Retire em Loja'
              when (not rt.t622idtransp is null) then 'Ent. Terceiro'
              WHEN (U.T021TIPO = 'E') THEN 'E-commerce'
              WHEN U.T021TIPO = 'L' THEN 'Entrega Direta'
          END as TIPOWMS,
          (SELECT R.CELULAR FROM RETORNA_CONTATOSCLI(CLI.T017DOC) R) AS TELEFONE,
          CLI.T017EMAIL AS EMAIL,
          C.T023NOME AS CIDADE,
          E.T016TIPOLOGRA AS TIPOENDERECO,
          E.T016LOGRADOURO AS LOGRADOURO,
          E.T016NUMERO AS NUMERO,
          E.T016COMPL AS COMPLEMENTO,
          E.T016BAIRRO AS BAIRRO,
          E.T016CEP AS CEP,
          CLI.T017TIPOPESSSOA AS TP_PESSOA,
          C.T023UF AS UF,
          CLI.T017DOC AS CODCLIENTE,
          U.T021CODUND AS COD_PRACA,
          U.T021DESC AS DESC_PRACA,
          V.T080IDVENDA AS VENDA_TRANSF,
          DM.T231IDDEMANDA AS IDDEMANDA,
          (SELECT FIRST 1 ED.T0764STATUS FROM T0764ITENTREGADIRETA ED
              WHERE ED.T0764IDDEMANDA = DM.T231IDDEMANDA AND ED.T0764IDCARGA = :IDCARGA) AS STATUS_CORTE,
          V.T080TIPO AS TIPO,
          COALESCE(ECO.T614NUMPEDIDO, IE.T0641IDVENDA) VENDA,
          PRO.T050AREAM3 AS CUBAGEM,
          E.T016IDENDE IDENDERECO,
          ITT.T07641IDITEM IDITEMTRANSF,
          COALESCE(ET.T631NOMECVT, ET.T631NOMEMKP) AS NOMESERVICO,
          v.t080infoentrega as INFOENTREGA,
          RT.T622IDTRANSP AS CODTRANSP,
          PSS.T025FANTASIA AS NOMETRANSPORTADORA
       FROM T0641ITENTREGA IE
       INNER JOIN T064CARGA CAR ON CAR.T064IDCARGA = IE.T0641IDCARGA
       INNER JOIN T065ROTAS ROT ON ROT.T065IDCARGA = CAR.T064IDCARGA
       INNER JOIN T017CLIENTES CLI ON CLI.T017DOC = IE.T0641DOCCLIENTE
       INNER JOIN T081ITENVENDA IV ON IV.T081IDITVENDA = IE.T0641IDITVENDA
       INNER JOIN T050PRODUTOS PRO ON PRO.T050IDPROD = IV.T081PRODUTO
       INNER JOIN T016ENDERECO E ON E.T016IDENDE = IV.T081IDENDENTREGA
       INNER JOIN T023CIDADES C ON C.T023IDCID = E.T016IDCID
       INNER JOIN T080VENDA V ON V.T080IDVENDA = IV.T081IDVENDA
       INNER JOIN T003USUARIOS VDO ON VDO.T003IDUSER = V.T080VENDEDOR
       INNER JOIN T021UNIDADES U ON U.T021CODUND = V.T080LOJA
       INNER JOIN T231DEMANDAMERC DM ON DM.T231ID81 = IE.T0641IDITVENDA
       LEFT JOIN T614ECOMVENDAS ECO ON ECO.T614IDVENDA = IE.T0641IDVENDA
       LEFT JOIN T0764ITENTREGADIRETA ITT ON ITT.T0764IDDEMANDA = DM.T231IDDEMANDA
       left join t622edrotatransf rt on rt.t622id = rot.t065idtransgrupo
       LEFT JOIN T631ECOMTRANSPORTADORES ET ON ET.T631ID = RT.T622IDTRANSP
       left join t025pessoas pss on pss.t025idpessoa = et.t631idfornecedor
       WHERE IE.T0641IDCARGA = IE.T0641IDCARGA
       AND IE.T0641IDVENDA <> 0
       AND IE.T0641IDITVENDA > 0

       UNION ALL

       SELECT
          ROT.T065NOMEROTA NOMEROTA,
          NULL QTDITENSROTA,
          NULL ATENDENTE,
          CASE
              WHEN
                COALESCE(
                (SELECT COUNT(*) FROM T0641ITENTREGA RIN
                 WHERE RIN.T0641IDCARGA <> IE.T0641IDCARGA
                 AND RIN.T0641IDITVENDA = ITR.T076SEQ
                 AND RIN.T0641IDVENDA = 0),0) > 0 THEN
                 'S'
              ELSE 'N'
          END REENTREGA,
          IE.T0641CODENTREGA,
          U.T021CNPJ,
          UPPER(U.T021DESC) T021DESC,
          IE.T0641SEQUENCIA,
          IE.T0641PERIODOENTREGA,
          IE.T0641IDITVENDA,
          ITR.T076PRODUTO,
          ITR.T076QTD,
          ITR.T076QTD AS QTDERELATORIO,
          ITR.T076UNITARIO,
          PRO.T050DESCRICAO,
          0,
          'Transferencia',
          U.T021CELULAR,
          'LOJA'||U.t021codund||'@LOJASEDMIL.COM.BR',
          C.T023NOME,
          E.T016TIPOLOGRA,
          E.T016LOGRADOURO,
          E.T016NUMERO,
          E.T016COMPL,
          E.T016BAIRRO,
          E.T016CEP,
          'J',
          C.T023UF,
          U.T021CODUND,
          U.T021CODUND,
          U.T021DESC,
          ITR.T076IDTRANSF,
          ITR.T076SEQ,
          ITR.T076STATUS,
          'T',
          IE.T0641IDVENDA VENDA,
          PRO.T050AREAM3 AS CUBAGEM,
          E.T016IDENDE IDENDERECO,
          NULL IDITEMTRANSF,
          null,
          null,
          null,
          null
       FROM T0641ITENTREGA IE
       INNER JOIN T064CARGA CAR ON CAR.T064IDCARGA = IE.T0641IDCARGA
       INNER JOIN T065ROTAS ROT ON ROT.T065IDCARGA = CAR.T064IDCARGA
       INNER JOIN T021UNIDADES U  ON  FDIGITOS(U.T021CNPJ) = FDIGITOS(IE.T0641DOCCLIENTE)
       INNER JOIN T076ITTRANSF ITR ON ITR.T076SEQ = IE.T0641IDITVENDA
       INNER JOIN T050PRODUTOS PRO ON PRO.T050IDPROD = ITR.T076PRODUTO
       INNER JOIN T016ENDERECO E ON E.T016IDENDE = U.T021ENDERECO
       INNER JOIN T023CIDADES C ON C.T023IDCID = E.T016IDCID

       WHERE CAR.T064DATA BETWEEN :DATAINICIO AND :DATAFINAL
       AND IE.T0641IDVENDA = 0
       AND IE.T0641IDITVENDA > 0
)

WHERE REENTREGA = 'S'

ORDER BY 7, 6




SELECT IDPREST, PRESTADORA, TIPO, ORDEM, TOTCUSTO, QTD,
    CAST (CASE WHEN TIPO = 2 THEN SUM(TOTCUSTO) ELSE 0 END AS DOUBLE PRECISION) TOTCUSTOGERAL,
    CAST (CASE WHEN TIPO = 2 THEN SUM(QTD) ELSE 0 END AS DOUBLE PRECISION) QTDGERAL
FROM
(
SELECT
   IDPREST,
   PRESTADORA,
   TIPO,
   ORDEM,
   SUM(CAST(TOTCUSTO AS NUMERIC(15,2))) TOTCUSTO,
   SUM(CAST(QTD AS INTEGER))QTD
FROM
(
   SELECT
      P.T210IDPREST IDPREST,
      '  • ' || P.T210NOME PRESTADORA,
      CAST ('01.01.2015' AS DATE) DATAREG,
      0 TOTCUSTO,
      0 QTD,
      0 ORDEM,
      0 TIPO
   FROM T210SPCPRESTADOR P

   UNION

   SELECT
      P.T210IDPREST IDPREST,
      '      - ' || S.T211DESCRICAO PRESTADORA,
      CAST(C.T214DATAHORA AS DATE) DATAREG,
      SUM(C.T214CUSTO) TOTCUSTO,
      CAST(COUNT(*) AS INTEGER) QTD,
      1 ORDEM,
      1 TIPO
   FROM T214SPCCONSULTAS C
   INNER JOIN T211SPCSERVICO S ON C.T214IDSERVICO = S.T211IDSERVICO
   INNER JOIN T210SPCPRESTADOR P ON S.T211IDPREST = P.T210IDPREST
   WHERE CHAR_LENGTH(C.T214PROTOCOLO) > 5
   GROUP BY 1,2,3

   UNION

   SELECT
      P.T210IDPREST IDPREST,
      '      - '||'Negativações' PRESTADORA,
      CAST(L.T218DATAHORARET AS DATE) DATAREG,
      SUM(N.T219CUSTOREG) TOTCUSTO,
      CAST(COUNT(*) AS INTEGER) QTD,
      2 ORDEM,
      1 TIPO
   FROM T218SPCLOTEMOV L
   INNER JOIN T219SPCLOTENEGITENS N ON L.T218IDLOTE = N.T219IDLOTE
   INNER JOIN T210SPCPRESTADOR P ON L.T218PRESTADORA = P.T210IDPREST
   WHERE L.T218TIPOMOV = 'I' AND N.T219CODRETORNO = 0 AND N.T219IDLOTE <> 1
   AND L.T218IDLOTE > 5
   GROUP BY 1,2,3

   UNION

   SELECT
         IDPREST,
         '  • ' ||'TOTAL' PRESTADORA,
         DATAREG,
         (TOTCUSTO),
         (QTD),
         1 ORDEM,
         2 TIPO
   FROM
   (
      SELECT
         P.T210IDPREST IDPREST,
         '  • ' || 'Total' PRESTADORA,
         CAST(C.T214DATAHORA AS DATE) DATAREG,
         SUM(C.T214CUSTO) TOTCUSTO,
         CAST(COUNT(*) AS INTEGER) QTD,
         1 ORDEM,
         2 TIPO
      FROM T214SPCCONSULTAS C
      INNER JOIN T211SPCSERVICO S ON C.T214IDSERVICO = S.T211IDSERVICO
      INNER JOIN T210SPCPRESTADOR P ON S.T211IDPREST = P.T210IDPREST
      WHERE CHAR_LENGTH(C.T214PROTOCOLO) > 5
      GROUP BY 1,2,3
   
   UNION
   
      SELECT
         P.T210IDPREST IDPREST,
         'Negativações' PRESTADORA,
         CAST(L.T218DATAHORARET AS DATE) DATAREG,
         SUM(N.T219CUSTOREG) TOTCUSTO1,
         CAST(COUNT(*) AS INTEGER) QTD,
         2 ORDEM,
         1 TIPO
      FROM T218SPCLOTEMOV L
      INNER JOIN T219SPCLOTENEGITENS N ON L.T218IDLOTE = N.T219IDLOTE
      INNER JOIN T210SPCPRESTADOR P ON L.T218PRESTADORA = P.T210IDPREST
      WHERE L.T218TIPOMOV = 'I' AND N.T219CODRETORNO = 0 AND N.T219IDLOTE <> 1
      AND L.T218IDLOTE > 5
      GROUP BY 1,2,3

   )

) WHERE (DATAREG BETWEEN :INICIO AND :FIM) OR (TIPO = 0)

GROUP BY 1,2,3,4
ORDER BY IDPREST, TIPO, ORDEM)
GROUP BY 1,2,3,4,5,6












SELECT 'LOJAS EDMIL S/A' DESTNOME,  UND.T021DESC, UND.T021CNPJ, UND.T021IE, 
E.T016TIPOLOGRA || ' ' || E.T016LOGRADOURO LOGRADOURO, 
E.T016NUMERO LOGRANUM, E.T016COMPL LOGRACOMPL, E.T016BAIRRO LOGRBAIRRO, E.T016CEP CEP, 
E.T016TELEFONE TELEFONE, E.T016EMAIL EMAIL, CD.T023CODIBGE, E.T016IDCID, CD.T023NOME CIDADE, 
CD.T023UF 
FROM T021UNIDADES UND 
INNER JOIN T016ENDERECO E ON (E.T016IDENDE = UND.T021ENDERECO) 
INNER JOIN T023CIDADES CD ON (CD.T023IDCID = E.T016IDCID) 
WHERE UND.T021CODUND = :CODLOJA



SELECT 'LOJAS EDMIL S/A' NOME,  UND.T021DESC, UND.T021CNPJ, UND.T021IE, 
E.T016LOGRADOURO LOGRADOURO, 
E.T016NUMERO LOGRANUM, E.T016COMPL LOGRACOMPL, E.T016BAIRRO LOGRBAIRRO, E.T016CEP CEP, 
E.T016TELEFONE TELEFONE, E.T016EMAIL EMAIL, CD.T023CODIBGE, E.T016IDCID, CD.T023NOME CIDADE, 
CD.T023UF FROM T021UNIDADES UND 
INNER JOIN T016ENDERECO E ON (E.T016IDENDE = UND.T021ENDERECO) 
INNER JOIN T023CIDADES CD ON (CD.T023IDCID = E.T016IDCID) 
WHERE UND.T021CODUND = 0


UPDATE T094MOVPROD MVP SET MVP.T094CUSTOMED = 0 
WHERE MVP.T094TIPOMOV = 5 
AND MVP.T094IDMASTER  = :IDNF
AND MVP.T094PRODUTO   = :CODPROD
AND MVP.T094ESTOQUE   = :LOJA
AND MVP.T094DOCFISC   = :DOC



INSERT INTO T283INTBENNER (T283IDOP, T283IDORIGEM, T283DATAHORAINC, T283STATUS) 
VALUES (70, :IDNF, CURRENT_TIMESTAMP, 'P')

