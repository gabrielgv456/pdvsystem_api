// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                    @id @default(autoincrement())
  key                  String?                @unique @default(uuid())
  email                String                 @unique
  name                 String
  fantasyName          String?
  cnpj                 String?
  ie                   String?
  cellPhone            String?
  adressCep            String? // desativar
  adressStreet         String? // desativar
  adressNumber         String? // desativar
  adressNeighborhood   String? // desativar
  adressCity           String? // desativar
  adressState          String? // desativar
  nameOwner            String? 
  addressRelation      Address?               @relation(name: "addressRelation", fields: [addressId], references: [id])
  addressId            Int?
  phone                String?
  isEmailValid         Boolean                @default(false)
  codEmailValidate     String?
  codEmailPass         String?
  tokenFiscalApi       String?
  password             String
  masterkey            String                 @default("123")
  urlLogo              String?
  taxCrt               TaxCrt?                @relation(fields: [taxCrtId], references: [id])
  taxCrtId             Int?
  taxRegime            TaxRegime?             @relation(fields: [taxRegimeId], references: [id])
  taxRegimeId          Int?
  taxCstPis            TaxCstPis?             @relation(fields: [taxCstPisId], references: [id])
  taxCstPisId          Int?
  taxCstPisAliquot     Float?
  taxCstCofins         TaxCstCofins?          @relation(fields: [taxCstCofinsId], references: [id])
  taxCstCofinsId       Int?
  taxCstCofinsAliquot  Float?
  sells                Sells[]
  products             Products[]
  itensSell            ItensSell[]
  paymentsells         PaymentSell[]
  transactions         Transactions[]
  transactionsProducts TransactionsProducts[]
  Sellers              Sellers[]
  Clients              Clients[]
  deliveries           Deliveries[]
  address              Address[]
  fiscalNotes          FiscalNotes[]
  Token                String                 @unique
  created_at           DateTime               @default(dbgenerated("CURRENT_TIMESTAMP"))
}

model Products {
  id                   Int                    @id @default(autoincrement())
  codRef               Int?
  name                 String
  value                Float
  store                User                   @relation(fields: [storeId], references: [id])
  storeId              Int
  created_at           DateTime               @default(dbgenerated("CURRENT_TIMESTAMP"))
  quantity             Int
  cost                 Float?
  profitMargin         Float?
  barCode              String?
  ncmCode              String?
  itemType             TaxItemType?           @relation(fields: [itemTypeId], references: [id])
  itemTypeId           Int?
  unitMeasurement      String?
  exTipi               String?
  brand                String?
  image                Images?               @relation(fields: [imageId], references: [id])
  imageId              Int?
  active               Boolean
  itenssells           ItensSell[]
  transactionsProducts TransactionsProducts[]
  deliveries           Deliveries[]
  taxIcms              TaxIcms[]
  taxIpi               TaxIpi[]
  taxPis               TaxPis[]
  taxCofins            TaxCofins[]
  @@unique([id, storeId])
  @@unique([codRef, storeId])
}

model TransactionsProducts {
  id            Int      @id @default(autoincrement())
  type          String
  created_at    DateTime @default(dbgenerated("CURRENT_TIMESTAMP"))
  description   String
  quantity      Int
  totalQuantity Int
  product       Products @relation(fields: [productId], references: [id])
  productId     Int
  store         User     @relation(fields: [storeId], references: [id])
  storeId       Int
}
model Sells {
  id            Int            @id @default(autoincrement())
  codRef        Int?
  store         User           @relation(fields: [storeId], references: [id])
  storeId       Int
  seller        Sellers?       @relation(fields: [sellerId], references: [id])
  sellerId      Int?
  client        Clients?       @relation(fields: [clientId], references: [id])
  clientId      Int?
  created_at    DateTime       @default(dbgenerated("CURRENT_TIMESTAMP"))
  sellValue     Float
  discountValue Float?
  valuePayment  Float
  deleted       Boolean        @default(false)
  cost          Float?
  fiscalNotes   FiscalNotes[]
  itenssells    ItensSell[]
  paymentsells  PaymentSell[]
  transactions  Transactions[]
  deliveries    Deliveries[]
  @@unique([id,storeId])
  @@unique([codRef, storeId])
}

model ItensSell {
  id                 Int          @id @default(autoincrement())
  store              User         @relation(fields: [storeId], references: [id])
  storeId            Int
  sell               Sells        @relation(fields: [sellId], references: [id])
  sellId             Int
  product            Products     @relation(fields: [idProduct], references: [id])
  idProduct          Int
  deleted            Boolean      @default(false)
  quantity           Int
  valueProduct       Float
  totalValue         Float
  descriptionProduct String
  costProduct        Float?
  totalCost          Float?
  discount           Float?
  totalDiscount      Float?
  created_at         DateTime     @default(dbgenerated("CURRENT_TIMESTAMP"))
  deliveries         Deliveries[]
}

model Deliveries {
  id                 Int            @id @default(autoincrement())
  store              User           @relation(fields: [storeId], references: [id])
  storeId            Int
  itemSell           ItensSell      @relation(fields: [itemSellId], references: [id])
  itemSellId         Int
  client             Clients?       @relation(fields: [clientId], references: [id])
  clientId           Int?
  address            Address        @relation(fields: [addressId], references: [id])
  addressId          Int
  product            Products       @relation(fields: [productId], references: [id])
  productId          Int
  sell               Sells          @relation(fields: [sellId], references: [id])
  sellId             Int
  status             String
  scheduledDate      DateTime
  deliveredDate      DateTime?
  onDeliveryPayValue Float?
  transactions       Transactions[]
  created_at         DateTime       @default(dbgenerated("CURRENT_TIMESTAMP"))
  @@unique([id,storeId])
}

model Address {
  id                  Int          @id @default(autoincrement())
  store               User         @relation(fields: [storeId], references: [id])
  storeId             Int
  addressType         AdressType   @relation(fields: [addressTypeId], references: [id])
  addressTypeId       Int
  addressStreet       String?
  addressNumber       String?
  addressNeighborhood String?
  addressComplement   String?
  addressCity         String? //desativar
  addressState        String? // desativar
  addressCep          String?
  city                Cities?      @relation(fields: [cityId], references: [id])
  cityId              Int?
  created_at          DateTime     @default(dbgenerated("CURRENT_TIMESTAMP"))
  deliveries          Deliveries[]
  user                User[]       @relation(name: "addressRelation")
  clients             Clients[]
  @@unique([id,storeId])
}

model Cities {
  id                Int @id @default(autoincrement())
  name              String
  ibge              Int
  state             States @relation(fields: [stateId], references: [id])
  stateId           Int
  latLon            String?
  cod_tom           Int?
  address           Address[]
}

model States {
  id                Int @id @default(autoincrement())
  name              String
  uf                String
  ibge              Int
  cities            Cities[]
  FiscalNotes       FiscalNotes[]
}

model AdressType {
  id      Int       @id @default(autoincrement())
  type    String    @unique
  address Address[]
}

model PaymentSell {
  id          Int          @id @default(autoincrement())
  store       User         @relation(fields: [storeId], references: [id])
  storeId     Int
  sell        Sells        @relation(fields: [sellId], references: [id])
  sellId      Int
  payment     PaymentTypes @relation(fields: [typepayment], references: [type])
  typepayment String
  value       Float
  created_at  DateTime     @default(dbgenerated("CURRENT_TIMESTAMP"))
}

model PaymentCondition {
  id            Int            @id @default(autoincrement())
  description   String
  codSefaz      String         @unique
  paymentTypes  PaymentTypes[]
}
model PaymentTypes {
  id                   Int                @id @default(autoincrement())
  type                 String             @unique
  codSefaz             String?            
  paymentCondition     PaymentCondition?  @relation(fields: [paymentConditionId], references: [id])
  paymentConditionId   Int?
  paymentsells         PaymentSell[]
}

model Transactions {
  id          Int         @id @default(autoincrement())
  type        String
  description String
  created_at  DateTime    @default(dbgenerated("CURRENT_TIMESTAMP"))
  value       Float
  sell        Sells?      @relation(fields: [sellId], references: [id])
  sellId      Int?
  store       User        @relation(fields: [storeId], references: [id])
  delivery    Deliveries? @relation(fields: [deliveryId], references: [id])
  deliveryId  Int?
  storeId     Int
}

model Sellers {
  id                 Int       @id @default(autoincrement())
  created_at         DateTime  @default(dbgenerated("CURRENT_TIMESTAMP"))
  name               String
  cpf                String?
  email              String?
  birthDate          DateTime?
  matricula          Int?
  gender             String?
  phoneNumber        String?
  cellNumber         String?
  adressStreet       String?
  adressNumber       String?
  adressNeighborhood String?
  adressComplement   String?
  adressCity         String?
  adressState        String?
  adressCep          String?
  active             Boolean   @default(true)
  store              User      @relation(fields: [storeId], references: [id])
  storeId            Int
  Sells              Sells[]
  @@unique([id, storeId])
  @@unique([cpf, storeId])
}

model Clients {
  id                 Int           @id @default(autoincrement())
  created_at         DateTime      @default(dbgenerated("CURRENT_TIMESTAMP"))
  name               String
  gender             String?
  cpf                String
  email              String?
  ie                 String?
  suframa            String?
  finalCostumer      Boolean?
  birthDate          DateTime?
  phoneNumber        String?
  cellNumber         String?
  adressStreet       String? // desabilitar
  adressNumber       String? // desabilitar
  adressNeighborhood String? // desabilitar
  adressComplement   String? // desabilitar
  adressCity         String? // desabilitar
  adressState        String? // desabilitar
  adressCep          String? // desabilitar
  address            Address?      @relation(fields: [addressId], references: [id])
  addressId          Int? 
  active             Boolean       @default(true)
  store              User          @relation(fields: [storeId], references: [id])
  storeId            Int
  taxPayerType       TaxPayerType? @relation(fields: [taxPayerTypeId], references: [id])
  taxPayerTypeId     Int?
  taxRemige          TaxRegime?    @relation(fields: [taxRegimeId], references: [id])
  taxRegimeId        Int?
  Sells              Sells[]
  Deliveries         Deliveries[]
  @@unique([id,storeId])
  @@unique([cpf, storeId])
}

model Images {
  id                 Int           @id @default(autoincrement())
  description        String?
  nameFile           String?
  host               String?
  path               String?
  owner              String?
  products           Products[]
}
// FISCAL TABLES START

model FiscalSeries {
  id               Int          @id @default(autoincrement())
  description      String
  fiscalnotes      FiscalNotes[]
}

model FiscalModels {
  id               Int          @id @default(autoincrement())
  codSefaz         Int
  description      String
  fiscalnotes      FiscalNotes[]
}
model FiscalNotes {
  id               Int           @id @default(autoincrement())
  numberNF         Int   
  keyNF            String        @unique
  enviroment       Int 
  xml              String
  canceled         Boolean       @default(false)
  createdAt        DateTime      @default(dbgenerated("CURRENT_TIMESTAMP"))
  serieNF          FiscalSeries  @relation(fields: [serieNFId], references: [id])       
  serieNFId        Int 
  modelNF          FiscalModels  @relation(fields: [modelNFId], references: [id])
  modelNFId        Int
  sell             Sells         @relation(fields: [sellId], references: [id])
  sellId           Int 
  state            States        @relation(fields: [stateId], references: [id])
  stateId          Int
  store            User          @relation(fields: [storeId], references: [id])
  storeId          Int
  @@unique([numberNF,storeId])

}
// TAXES TABLES START

// 1. PRODUCTS TAXES

model TaxIcms {
  id              Int               @id @default(autoincrement())
  product         Products          @relation(fields: [productId], references: [id])
  productId       Int
  taxIcmsOrigin   TaxIcmsOrigin?    @relation(fields: [taxIcmsOriginId], references: [id])
  taxIcmsOriginId Int?
  fcpAliquot      Float?
  taxIcmsNfe      TaxIcmsNfe[]
  taxIcmsNoPayer  TaxIcmsNoPayer[]
  taxIcmsNfce     TaxIcmsNfce[]
  taxIcmsSt       TaxIcmsST[]
  @@unique([productId])
}

model TaxIcmsOrigin {
  id          Int       @id
  description String
  TaxIcms     TaxIcms[]
}

model TaxIcmsNfe {
  id                   Int                 @id @default(autoincrement())
  taxIcms              TaxIcms             @relation(fields: [taxIcmsId], references: [id])
  taxIcmsId            Int
  taxCstIcms           TaxIcmsCst?         @relation(fields: [taxCstIcmsId], references: [id])
  taxCstIcmsId         Int?
  taxModalityBC        TaxModalityBCICMS?  @relation(fields: [taxModalityBCId], references: [id])
  taxModalityBCId      Int?
  taxReasonExemption   TaxReasonExemption? @relation(fields: [taxReasonExemptionId], references: [id])
  taxReasonExemptionId Int?
  taxCfopState         TaxCfop?            @relation(name: "taxCfopState", fields: [taxCfopStateId], references: [id])
  taxCfopStateId       Int?
  taxCfopInterstate    TaxCfop?            @relation(name: "taxCfopInterstate", fields: [taxCfopInterstateId], references: [id])
  taxCfopInterstateId  Int?
  taxRedBCICMS         Float?
  taxAliquotIcms       Float?
  @@unique([taxIcmsId])
}

model TaxIcmsNfce {
  id                  Int         @id @default(autoincrement())
  taxIcms             TaxIcms     @relation(fields: [taxIcmsId], references: [id])
  taxIcmsId           Int
  taxCstIcms          TaxIcmsCst? @relation(fields: [taxCstIcmsId], references: [id])
  taxCstIcmsId        Int? 
  taxCfop             TaxCfop?    @relation(name: "taxCfop", fields: [taxCfopId], references: [id])
  taxCfopId           Int?
  taxCfopDevolution   TaxCfop?    @relation(name: "taxCfopDevolution", fields: [taxCfopDevolutionId], references: [id])
  taxCfopDevolutionId Int?
  taxRedBCICMS        Float?
  taxAliquotIcms      Float?
  @@unique([taxIcmsId])
}

model TaxIcmsNoPayer {
  id             Int         @id @default(autoincrement())
  taxIcms        TaxIcms     @relation(fields: [taxIcmsId], references: [id])
  taxIcmsId      Int
  taxCstIcms     TaxIcmsCst? @relation(fields: [taxCstIcmsId], references: [id])
  taxCstIcmsId   Int?
  taxRedBCICMS   Float?
  taxAliquotIcms Float?
  @@unique([taxIcmsId])
}

model TaxReasonExemption {
  id          Int          @id
  description String
  taxIcmsNFe  TaxIcmsNfe[]
}

model TaxIcmsCst {
  id             Int              @id
  description    String
  taxIcmsNFe     TaxIcmsNfe[]
  taxIcmsNoPayer TaxIcmsNoPayer[]
  taxIcmsNfce    TaxIcmsNfce[]
  taxIcmsST      TaxIcmsST[]
}

model TaxModalityBCICMS {
  id          Int          @id
  description String
  taxIcmsNFe  TaxIcmsNfe[]
  taxIcmsST   TaxIcmsST[]
}

model TaxItemType {
  id          Int        @id
  description String
  products    Products[]
}

model TaxCfop {
  id                    Int           @id
  description           String
  type                  String        @default("nfe")
  environment           String        @default("estadual")
  taxIcmsNfeState       TaxIcmsNfe[]  @relation(name: "taxCfopState")
  taxIcmsNfeInterstate  TaxIcmsNfe[]  @relation(name: "taxCfopInterstate")
  taxIcmsNfce           TaxIcmsNfce[] @relation(name: "taxCfop")
  taxIcmsNfceDevolution TaxIcmsNfce[] @relation(name: "taxCfopDevolution")
  taxIcmsSTState        TaxIcmsST[]   @relation(name: "taxCfopStateSt")
  taxIcmsSTInterstate   TaxIcmsST[]   @relation(name: "taxCfopInterstateSt")
}

model TaxIcmsST {
  id                    Int                @id @default(autoincrement())
  taxIcms               TaxIcms            @relation(fields: [taxIcmsId], references: [id])
  taxIcmsId             Int
  taxCstIcmsSt          TaxIcmsCst?        @relation(fields: [taxCstIcmsStId], references: [id])
  taxCstIcmsStId        Int?
  taxCfopStateSt        TaxCfop?           @relation(name: "taxCfopStateSt", fields: [taxCfopStateIdSt], references: [id])
  taxCfopStateIdSt      Int?
  taxCfopInterstateSt   TaxCfop?           @relation(name: "taxCfopInterstateSt", fields: [taxCfopInterstateIdSt], references: [id])
  taxCfopInterstateIdSt Int?
  taxModalityBCSt       TaxModalityBCICMS? @relation(fields: [taxModalityBCIdSt], references: [id])
  taxModalityBCIdSt     Int?
  taxMvaPauta           Float?
  taxRedBCICMSSt        Float?
  taxAliquotIcmsInner   Float?
  taxRedBCICMSInner     Float?
  @@unique([taxIcmsId])
}

model TaxIpi {
  id                        Int        @id @default(autoincrement())
  product                   Products   @relation(fields: [productId], references: [id])
  productId                 Int
  taxCstIpiExit             TaxCstIpi? @relation(name: "cstIpiExit", fields: [taxCstIpiExitId], references: [id])
  taxCstIpiExitId           Int?
  taxCstIpiEntrance         TaxCstIpi? @relation(name: "cstIpiEntrance", fields: [taxCstIpiEntranceId], references: [id])
  taxCstIpiEntranceId       Int?
  taxAliquotIpi             Float?
  taxClassificationClassIpi String?
  taxStampIpi               String?
  taxQtdStampControlIpi     Int?
  taxCodEnquadLegalIpi      String?
  taxCnpjProd               String?
  @@unique([productId])
}

model TaxCstIpi {
  id             Int      @id
  description    String
  type           String
  taxIpiExit     TaxIpi[] @relation(name: "cstIpiExit")
  taxIpiEntrance TaxIpi[] @relation(name: "cstIpiEntrance")
}

model TaxPis {
  id                    Int        @id @default(autoincrement())
  product               Products   @relation(fields: [productId], references: [id])
  productId             Int
  taxCstPisExit         TaxCstPis? @relation(name: "cstPisExit", fields: [taxCstPisExitId], references: [id])
  taxCstPisExitId       Int?
  taxCstPisEntrance     TaxCstPis? @relation(name: "cstPisEntrance", fields: [taxCstPisEntranceId], references: [id])
  taxCstPisEntranceId   Int?
  taxAliquotPisExit     Float?
  taxAliquotPisEntrance Float?
  @@unique([productId])
}

model TaxCofins {
  id                       Int           @id @default(autoincrement())
  product                  Products      @relation(fields: [productId], references: [id])
  productId                Int
  taxCstCofinsExit         TaxCstCofins? @relation(name: "cstCofinsExit", fields: [taxCstCofinsExitId], references: [id])
  taxCstCofinsExitId       Int?
  taxCstCofinsEntrance     TaxCstCofins? @relation(name: "cstCofinsEntrance", fields: [taxCstCofinsEntranceId], references: [id])
  taxCstCofinsEntranceId   Int?
  taxAliquotCofinsExit     Float?
  taxAliquotCofinsEntrance Float?
  @@unique([productId])
}

// 2. USER TAXES

model TaxCrt {
  id          Int    @id
  description String
  User        User[]
}

model TaxRegime {
  id          Int       @id @default(autoincrement())
  description String
  User        User[]
  Clients     Clients[]
}

model TaxCstPis {
  id             Int      @id
  description    String
  User           User[]
  type           String   @default("entrance")
  taxPisExit     TaxPis[] @relation(name: "cstPisExit")
  taxPisEntrance TaxPis[] @relation(name: "cstPisEntrance")
}

model TaxCstCofins {
  id                Int         @id
  description       String
  User              User[]
  type              String      @default("entrance")
  taxCofinsExit     TaxCofins[] @relation(name: "cstCofinsExit")
  taxCofinsEntrance TaxCofins[] @relation(name: "cstCofinsEntrance")
}

model TaxPayerType {
  id          Int       @id
  description String
  Clients     Clients[]
}
