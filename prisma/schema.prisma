// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                    @id @default(autoincrement())
  email                String                 @unique
  name                 String
  fantasyName          String?
  cnpj                 String?
  ie                   String?
  cellPhone            String?
  adressCep            String?
  adressStreet         String?
  adressNumber         String?
  adressNeighborhood   String?
  adressCity           String?
  adressState          String?
  nameOwner            String?
  phone                String?
  isEmailValid         Boolean                @default(false)
  codEmailValidate     String?
  codEmailPass         String? 
  password             String
  masterkey            String                 @default("123")
  urlLogo              String?
  taxCrt               TaxCrt?                @relation(fields: [taxCrtId], references: [id])
  taxCrtId             Int?     
  taxRegime            TaxRegime?             @relation(fields: [taxRegimeId], references: [id])
  taxRegimeId          Int?
  taxCstPis            TaxCstPis?             @relation(fields: [taxCstPisId], references: [id])
  taxCstPisId          Int?
  taxCstPisAliquot        Float? 
  taxCstCofins         TaxCstCofins?          @relation(fields: [taxCstCofinsId], references: [id])
  taxCstCofinsId       Int?
  taxCstCofinsAliquot  Float?               
  sells                Sells[]
  products             Products[]
  itensSell            ItensSell[]
  paymentsells         PaymentSell[]
  transactions         Transactions[]
  transactionsProducts TransactionsProducts[]
  Sellers              Sellers[]
  Clients              Clients[]
  deliveries           Deliveries[]
  address              Address[]
  Token                String                 @unique
  created_at           DateTime               @default(dbgenerated("CURRENT_TIMESTAMP"))
}

model Products {
  id                   Int                    @id @default(autoincrement())
  name                 String
  value                Float
  store                User                   @relation(fields: [storeId], references: [id])
  storeId              Int
  created_at           DateTime               @default(dbgenerated("CURRENT_TIMESTAMP"))
  itenssells           ItensSell[]
  transactionsProducts TransactionsProducts[]
  quantity             Int
  cost                 Float?
  profitMargin         Float?
  barCode              String?
  ncmCode              String?
  itemType             TaxItemType?              @relation(fields: [itemTypeId], references: [id])
  itemTypeId           Int?
  cfop                 TaxCfop?                  @relation(fields: [cfopId],references: [id])
  cfopId               Int?
  unitMeasurement      String?
  active               Boolean
  deliveries           Deliveries[]
}

model TransactionsProducts {
  id            Int      @id @default(autoincrement())
  type          String
  created_at    DateTime @default(dbgenerated("CURRENT_TIMESTAMP"))
  description   String
  quantity      Int
  totalQuantity Int
  product       Products @relation(fields: [productId], references: [id])
  productId     Int
  store         User     @relation(fields: [storeId], references: [id])
  storeId       Int
}

model PaymentTypes {
  id           Int           @id @default(autoincrement())
  type         String        @unique
  paymentsells PaymentSell[]
}

model Sells {
  id             Int            @id @default(autoincrement())
  codRef         Int?
  store          User           @relation(fields: [storeId], references: [id])
  storeId        Int
  seller         Sellers?       @relation(fields: [sellerId], references: [id])
  sellerId       Int?
  client         Clients?       @relation(fields: [clientId], references: [id])
  clientId       Int?           
  created_at     DateTime       @default(dbgenerated("CURRENT_TIMESTAMP"))
  sellValue      Float
  discountValue  Float?
  valuePayment   Float
  deleted        Boolean        @default(false)
  cost           Float?
  itenssells     ItensSell[]
  paymentsells   PaymentSell[]
  transactions   Transactions[]
  deliveries     Deliveries[]
}

model ItensSell {
  id                 Int      @id @default(autoincrement())
  store              User     @relation(fields: [storeId], references: [id])
  storeId            Int
  sell               Sells    @relation(fields: [sellId], references: [id])
  sellId             Int
  product            Products @relation(fields: [idProduct], references: [id])
  idProduct          Int
  deleted            Boolean  @default(false)
  quantity           Int
  valueProduct       Float
  totalValue         Float
  descriptionProduct String
  costProduct        Float?
  totalCost          Float?
  discount           Float?
  totalDiscount      Float?
  created_at         DateTime @default(dbgenerated("CURRENT_TIMESTAMP"))
  deliveries         Deliveries[]
}

model Deliveries {
  id                  Int         @id @default(autoincrement())
  store               User        @relation(fields:[storeId], references: [id])
  storeId             Int
  itemSell            ItensSell   @relation(fields: [itemSellId], references: [id])
  itemSellId          Int
  client              Clients?    @relation(fields: [clientId], references: [id])
  clientId            Int? 
  address             Address     @relation(fields: [addressId], references: [id])
  addressId           Int
  product             Products    @relation(fields: [productId],references: [id])
  productId           Int
  sell                Sells       @relation(fields: [sellId], references: [id])
  sellId              Int
  status              String
  scheduledDate       DateTime
  deliveredDate       DateTime?
  onDeliveryPayValue  Float?
  transactions        Transactions[]
  created_at          DateTime    @default(dbgenerated("CURRENT_TIMESTAMP"))
}

model Address {
  id                  Int          @id @default(autoincrement())
  store               User         @relation(fields: [storeId], references: [id])
  storeId             Int
  addressType         AdressType   @relation(fields: [addressTypeId], references:[id])
  addressTypeId       Int
  addressStreet       String?
  addressNumber       String?
  addressNeighborhood String?
  addressComplement   String?
  addressCity         String?
  addressState        String?
  addressCep          String?
  created_at          DateTime     @default(dbgenerated("CURRENT_TIMESTAMP"))
  deliveries          Deliveries[]
}

model AdressType {
  id          Int     @id @default(autoincrement())
  type        String  @unique
  address     Address[]
}

model PaymentSell {
  id          Int          @id @default(autoincrement())
  store       User         @relation(fields: [storeId], references: [id])
  storeId     Int
  sell        Sells        @relation(fields: [sellId], references: [id])
  sellId      Int
  payment     PaymentTypes @relation(fields: [typepayment], references: [type])
  typepayment String
  value       Float
  created_at  DateTime     @default(dbgenerated("CURRENT_TIMESTAMP"))
}

model Transactions {
  id          Int         @id @default(autoincrement())
  type        String
  description String
  created_at  DateTime    @default(dbgenerated("CURRENT_TIMESTAMP"))
  value       Float
  sell        Sells?      @relation(fields: [sellId], references: [id])
  sellId      Int?
  store       User        @relation(fields: [storeId], references: [id])
  delivery    Deliveries?  @relation(fields: [deliveryId], references: [id])
  deliveryId  Int?
  storeId     Int
}

model Sellers {
  id                 Int       @id @default(autoincrement())
  created_at         DateTime  @default(dbgenerated("CURRENT_TIMESTAMP"))
  name               String
  cpf                String?
  email              String?
  birthDate          DateTime?
  matricula          Int?
  gender             String?
  phoneNumber        String?
  cellNumber         String?
  adressStreet       String?
  adressNumber       String?
  adressNeighborhood String?
  adressComplement   String?
  adressCity         String?
  adressState        String?
  adressCep          String?
  active             Boolean   @default(true)
  store              User      @relation(fields: [storeId], references: [id])
  storeId            Int
  Sells              Sells[]
}

model Clients {
  id                 Int       @id @default(autoincrement())
  created_at         DateTime  @default(dbgenerated("CURRENT_TIMESTAMP"))
  name               String
  gender             String?
  cpf                String
  email              String?
  ie                 String?
  suframa            String?
  finalCostumer      Boolean?
  birthDate          DateTime?
  phoneNumber        String?
  cellNumber         String?
  adressStreet       String?
  adressNumber       String?
  adressNeighborhood String?
  adressComplement   String?
  adressCity         String?
  adressState        String?
  adressCep          String?
  active             Boolean   @default(true)
  store              User      @relation(fields: [storeId], references: [id])
  storeId            Int
  taxPayerType       TaxPayerType? @relation(fields: [taxPayerTypeId], references: [id])
  taxPayerTypeId     Int?
  taxRemige          TaxRegime? @relation(fields: [taxRegimeId], references: [id])
  taxRegimeId        Int?
  Sells              Sells[]
  Deliveries         Deliveries[]
}

model TaxIcmsOrigem {
  id            Int       @id 
  description   String
}

model TaxIcmsCst {
  id            Int       @id
  description   String        
}

model TaxItemType {
  id            Int       @id
  description   String 
  products      Products[]
}

model TaxCfop {
  id            Int       @id
  description   String
  products      Products[]
}

model TaxCrt {
  id              Int         @id 
  description     String
  User            User[]
}

model TaxRegime {
  id            Int       @id @default(autoincrement())
  description   String
  User          User[]
  Clients       Clients[]
}

model TaxCstPis {
  id            Int       @id 
  description   String
  User          User[]
}

model TaxCstCofins {
  id            Int       @id
  description   String
  User          User[]
}

model TaxPayerType {
  id            Int       @id
  description   String
  Clients       Clients[]
}